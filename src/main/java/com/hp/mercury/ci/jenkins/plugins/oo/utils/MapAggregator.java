// (c) Copyright 2013 Hewlett-Packard Development Company, L.P. 
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
package com.hp.mercury.ci.jenkins.plugins.oo.utils;


import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

/**
 * this aggregator maps the elements of the aggregated collection to the result of a function application
 * on those elements.
 * the function is set during the initialization of the aggregator instance and is passed as a
 * {@link Handler}
 *
 * @param <R> the returned value of the handler function -
 *           the resulting map value type.
 * @param <T> the type of the aggregated collection
 *           the resulting map key type.
 */
public class MapAggregator<T, R> implements Aggregator<Map<T, R>, T> {

    /**
     * function to apply on the currently aggregated element to calculate it's mapped value
     */
    private Handler<R, T> valueCalculator;

    /**
     *
     * @param valueCalculator function to apply on the currently aggregated element to
     *                        calculate it's mapped value
     */
    public MapAggregator(Handler<R, T> valueCalculator) {
        this.valueCalculator = valueCalculator;
    }

    /**
     * the resulting map
     */
    private HashMap<T, R> map;

    @Override
    public void init(Collection<T> elements) {
        this.map = new HashMap<T,R>(elements.size());
    }

    @Override
    public void aggregate(T element) {
        this.map.put(element, this.valueCalculator.apply(element));
    }

    /**
     *
     * @return a mapping from the aggregated collection elements to values generated by applying a function on
     * each, and binding the pair as key-value.
     */
    @Override
    public Map<T, R> finish() {
        return this.map;
    }
}
