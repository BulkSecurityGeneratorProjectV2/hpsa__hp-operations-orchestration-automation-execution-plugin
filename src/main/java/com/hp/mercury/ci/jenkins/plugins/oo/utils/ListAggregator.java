// (c) Copyright 2013 Hewlett-Packard Development Company, L.P. 
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
package com.hp.mercury.ci.jenkins.plugins.oo.utils;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

/**
 * an implementation of aggregator that produces a list of elements based on the aggregated collection.
 * the produced elements are created by a applying a {@link Handler} object on the currently aggregated object.
 * the handler is given during the aggregator initialization.
 *
 * @param <R> the type of the returned list aggregation result
 * @param <T> the type of the collection being aggregated
 */
public class ListAggregator<R,T> implements Aggregator<List<R>, T> {

    /**
     * the handler to apply on each element of the collection being aggregated
     */
    private Handler<R, T> handler;

    /**
     *
     * @param handler the handler to apply on each element of the collection being aggregated
     */
    public ListAggregator(Handler<R, T> handler) {
        this.handler = handler;
    }

    /**
     * the aggregation result
     */
    List<R> ret;

    @Override
    public void init(Collection<T> elements) {
        ret = new ArrayList<R>(elements.size());
    }

    @Override
    public void aggregate(T element) {
        ret.add(handler.apply(element));
    }

    /**
     *
     * @return a list whose elements are generated by applying a function on each of the aggregated
     * collection's elements
     */
    @Override
    public List<R> finish() {
        return ret;
    }
}
